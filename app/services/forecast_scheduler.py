"""
Agendador para execu√ß√£o autom√°tica de previs√µes financeiras

Este m√≥dulo configura tarefas agendadas para gerar previs√µes 
automaticamente em intervalos regulares.
"""

import logging
from datetime import datetime
from apscheduler.schedulers.background import BackgroundScheduler
from apscheduler.triggers.cron import CronTrigger

from services.prophet_forecaster import ProfitForecaster

# Configura√ß√£o de logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class ForecastScheduler:
    """
    Classe respons√°vel pelo agendamento de previs√µes autom√°ticas
    """
    
    def __init__(self):
        self.scheduler = BackgroundScheduler()
        self.forecaster = ProfitForecaster()
        
    def setup_scheduled_tasks(self):
        """
        Configura as tarefas agendadas para previs√µes
        """
        try:
            # Gerar previs√µes todo dia 1¬∫ de cada m√™s √†s 06:00
            self.scheduler.add_job(
                func=self._monthly_forecast_job,
                trigger=CronTrigger(day=1, hour=6, minute=0),
                id='monthly_forecast',
                name='Gera√ß√£o mensal de previs√µes',
                replace_existing=True,
                max_instances=1,
                coalesce=True
            )
            
            # Atualizar previs√µes toda segunda-feira √†s 08:00
            self.scheduler.add_job(
                func=self._weekly_forecast_update,
                trigger=CronTrigger(day_of_week='mon', hour=8, minute=0),
                id='weekly_forecast_update',
                name='Atualiza√ß√£o semanal de previs√µes',
                replace_existing=True,
                max_instances=1,
                coalesce=True
            )
            
            # Limpeza de logs antigos - todo domingo √†s 02:00
            self.scheduler.add_job(
                func=self._cleanup_old_logs,
                trigger=CronTrigger(day_of_week='sun', hour=2, minute=0),
                id='log_cleanup',
                name='Limpeza de logs antigos',
                replace_existing=True,
                max_instances=1,
                coalesce=True
            )
            
            logger.info("Tarefas agendadas configuradas com sucesso")
            
        except Exception as e:
            logger.error(f"Erro ao configurar tarefas agendadas: {e}")
            raise
    
    def _monthly_forecast_job(self):
        """
        Job executado mensalmente para gerar novas previs√µes
        """
        try:
            logger.info("Iniciando gera√ß√£o mensal de previs√µes...")
            
            # Gera previs√µes para 6 meses
            summary = self.forecaster.generate_and_save_forecasts(periods=6)
            
            logger.info(f"Previs√µes mensais geradas: {summary.total_forecasts} registros")
            logger.info(f"Lucro m√©dio previsto: ${summary.avg_predicted_profit:,.2f}")
            logger.info(f"Per√≠odo: {summary.forecast_period_start} at√© {summary.forecast_period_end}")
            
        except Exception as e:
            logger.error(f"Erro na gera√ß√£o mensal de previs√µes: {e}")
    
    def _weekly_forecast_update(self):
        """
        Job executado semanalmente para atualizar previs√µes se houver novos dados
        """
        try:
            logger.info("Verificando necessidade de atualiza√ß√£o semanal...")
            
            # Verifica se h√° previs√µes atuais
            current_forecasts = self.forecaster.get_current_forecasts()
            
            if not current_forecasts:
                logger.info("[PREVISAO] Nenhuma previs√£o atual encontrada. Gerando novas...")
                self._monthly_forecast_job()
                return
            
            # Verifica se as previs√µes s√£o muito antigas (mais de 7 dias)
            latest_forecast = max(current_forecasts, key=lambda x: x.forecast_date)
            days_old = (datetime.now().date() - latest_forecast.forecast_date).days
            
            # Verifica se a √∫ltima previs√£o √© para uma data no passado
            if latest_forecast.forecast_date <= datetime.now().date():
                logger.info("Previs√µes desatualizadas (data no passado). Atualizando...")
                self._monthly_forecast_job()
            elif days_old > 7:
                logger.info(f"Previs√µes antigas detectadas ({days_old} dias). Atualizando...")
                self._monthly_forecast_job()
            else:
                logger.info(f"Previs√µes atuais ainda v√°lidas ({days_old} dias)")
            
        except Exception as e:
            logger.error(f"Erro na atualiza√ß√£o semanal: {e}")
    
    def _cleanup_old_logs(self):
        """
        Job para limpeza de logs antigos (placeholder para implementa√ß√£o futura)
        """
        try:
            logger.info("Executando limpeza de logs antigos...")
            # Implementar limpeza de logs se necess√°rio
            logger.info("Limpeza de logs conclu√≠da")
            
        except Exception as e:
            logger.error(f"Erro na limpeza de logs: {e}")
    
    def _initial_forecast_generation(self):
        """
        Gera previs√µes iniciais ao iniciar a aplica√ß√£o
        """
        try:
            logger.info("Iniciando gera√ß√£o de previs√µes ao startup da aplica√ß√£o...")
            
            # Verifica se h√° dados hist√≥ricos suficientes
            from sqlmodel import Session, select
            from database.db_connect import engine
            from model.models import Profit
            
            with Session(engine) as session:
                profit_count = len(session.exec(select(Profit)).all())
                
                if profit_count < 3:
                    logger.warning(f"Dados hist√≥ricos insuficientes ({profit_count} registros). M√≠nimo: 3, Recomendado: 6+")
                    logger.info("Execute o script populate_sample_data.py para gerar dados de exemplo")
                    return
                elif profit_count < 6:
                    logger.warning(f"Dados limitados ({profit_count} registros). Previs√µes b√°sicas ser√£o geradas. Recomendado: 6+ meses para melhor qualidade.")
                
                # Log detalhado dos dados hist√≥ricos para diagn√≥stico
                profits = session.exec(select(Profit).order_by("period_start")).all()
                logger.info(f"[DADOS] DADOS HIST√ìRICOS DISPON√çVEIS ({len(profits)} registros):")
                for profit in profits:
                    logger.info(f"   {profit.period_start.strftime('%Y-%m')}: ${profit.net_profit:,.2f}")
            
            # Verifica se j√° existem previs√µes v√°lidas
            current_forecasts = self.forecaster.get_current_forecasts()
            
            # Se n√£o h√° previs√µes ou elas est√£o desatualizadas, gera novas
            should_generate = True
            
            if current_forecasts:
                # Verifica se as previs√µes s√£o atuais (pelo menos uma previs√£o futura)
                future_forecasts = [f for f in current_forecasts if f.forecast_date > datetime.now().date()]
                
                if len(future_forecasts) >= 3:  # Pelo menos 3 meses de previs√µes futuras
                    logger.info(f"Previs√µes v√°lidas encontradas ({len(future_forecasts)} meses futuros). Pulando gera√ß√£o inicial.")
                    should_generate = False
            
            if should_generate:
                logger.info("[GERANDO] GERANDO NOVAS PREVIS√ïES...")
                # Gera previs√µes para 6 meses
                summary = self.forecaster.generate_and_save_forecasts(periods=6)
                
                logger.info(f"[SUCESSO] Previs√µes iniciais geradas com sucesso!")
                logger.info(f"   Total de previs√µes: {summary.total_forecasts}")
                logger.info(f"   Lucro m√©dio previsto: ${summary.avg_predicted_profit:,.2f}")
                logger.info(f"   Per√≠odo: {summary.forecast_period_start} at√© {summary.forecast_period_end}")
                
                # Alertas baseados nos resultados
                if summary.avg_predicted_profit < 0:
                    logger.warning("[ALERTA] ALERTA: Previs√µes indicam lucro m√©dio negativo")
                    logger.info("[SUGESTAO] SUGEST√ïES:")
                    logger.info("   ‚Ä¢ Revisar dados do √∫ltimo per√≠odo (podem conter anomalias)")
                    logger.info("   ‚Ä¢ Verificar se houve eventos excepcionais recentes")
                    logger.info("   ‚Ä¢ Considerar adicionar mais dados hist√≥ricos")
                elif summary.avg_predicted_profit < 1000:
                    logger.warning("[ALERTA] Previs√µes indicam lucros baixos")
                
                # Log b√°sico do modelo j√° treinado
                logger.info("ü§ñ Modelo Prophet treinado com sucesso")
            
        except Exception as e:
            logger.error(f"Erro na gera√ß√£o inicial de previs√µes: {e}")
            # N√£o propaga o erro para n√£o impedir o startup da aplica√ß√£o
    
    def start_scheduler(self):
        """
        Inicia o agendador e executa gera√ß√£o inicial de previs√µes
        """
        try:
            if not self.scheduler.running:
                self.setup_scheduled_tasks()
                self.scheduler.start()
                logger.info("Agendador de previs√µes iniciado")
                
                # Executa gera√ß√£o inicial de previs√µes ao iniciar
                logger.info("Executando gera√ß√£o inicial de previs√µes...")
                try:
                    self._initial_forecast_generation()
                except Exception as e:
                    logger.error(f"Erro na gera√ß√£o inicial de previs√µes: {e}")
                
                # Log das pr√≥ximas execu√ß√µes
                jobs = self.scheduler.get_jobs()
                for job in jobs:
                    next_run = job.next_run_time
                    if next_run:
                        logger.info(f"Pr√≥xima execu√ß√£o de '{job.name}': {next_run}")
            else:
                logger.warning("Agendador j√° est√° em execu√ß√£o")
                
        except Exception as e:
            logger.error(f"Erro ao iniciar agendador: {e}")
            raise
    
    def stop_scheduler(self):
        """
        Para o agendador
        """
        try:
            if self.scheduler.running:
                self.scheduler.shutdown(wait=False)
                logger.info("Agendador de previs√µes parado")
            else:
                logger.warning("Agendador j√° estava parado")
                
        except Exception as e:
            logger.error(f"Erro ao parar agendador: {e}")
    
# Inst√¢ncia global do agendador
forecast_scheduler = ForecastScheduler()

def start_forecast_scheduler():
    """
    Fun√ß√£o para iniciar o agendador (chamada no startup da aplica√ß√£o)
    """
    forecast_scheduler.start_scheduler()

def stop_forecast_scheduler():
    """
    Fun√ß√£o para parar o agendador (chamada no shutdown da aplica√ß√£o)
    """
    forecast_scheduler.stop_scheduler()
